{
    "name": "BoxApp",
    "structs": {},
    "methods": [
        {
            "name": "fill_box",
            "args": [
                {
                    "type": "string",
                    "name": "raw_key"
                },
                {
                    "type": "string",
                    "name": "value"
                },
                {
                    "type": "uint64",
                    "name": "index"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_box",
            "args": [
                {
                    "type": "string",
                    "name": "raw_key"
                },
                {
                    "type": "uint64",
                    "name": "index"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_application",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "DeleteApplication"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "memory": {
                    "keyType": "uint64",
                    "valueType": "AVMString",
                    "prefix": ""
                },
                "metadata": {
                    "keyType": "uint64",
                    "valueType": "uint64",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        45
                    ],
                    "errorMessage": "OnCompletion is not DeleteApplication"
                },
                {
                    "pc": [
                        57,
                        79
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        112
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        48,
                        60,
                        82
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        174
                    ],
                    "errorMessage": "check self.memory entry exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiACAQAxG0EAXoIDBF78iQoE5bwtTAQzs0meNhoAjgMAJgAQAAIjQzEZgQUSRDEYRIgAsCJDMRkURDEYRDYaAVcCADYaAheIAIYiQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgMXiAANIkMxGUD/uTEYFEQiQ4oDACOAAIv9AVEACBdJIgiL/hVJQQAaiwMWSYwAvUUBQAAPiwBJvEiL/r+LAhYjFr+JiwC9TElOAowBRIsECIGAgAIOQf/qiwFJiwRJTgMIiwBJTwLTTE8Ci/7SiYoCAIv+AVEACBdJIggWvEgWvEiJMQAyCRJEsTIAMglJsgkjsgiyByKyELIBs4k=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}