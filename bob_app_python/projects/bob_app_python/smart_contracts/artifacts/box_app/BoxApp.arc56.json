{
    "name": "BoxApp",
    "structs": {},
    "methods": [
        {
            "name": "fill_box",
            "args": [
                {
                    "type": "string",
                    "name": "raw_key"
                },
                {
                    "type": "string",
                    "name": "value"
                },
                {
                    "type": "uint64",
                    "name": "index"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_box",
            "args": [
                {
                    "type": "string",
                    "name": "raw_key"
                },
                {
                    "type": "uint64",
                    "name": "index"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_application",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "DeleteApplication"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "memory": {
                    "keyType": "uint64",
                    "valueType": "AVMString",
                    "prefix": ""
                },
                "metadata": {
                    "keyType": "uint64",
                    "valueType": "uint64",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        49
                    ],
                    "errorMessage": "OnCompletion is not DeleteApplication"
                },
                {
                    "pc": [
                        61,
                        83
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        116
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        52,
                        64,
                        86
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        308
                    ],
                    "errorMessage": "check self.memory entry exists"
                },
                {
                    "pc": [
                        163,
                        513
                    ],
                    "errorMessage": "check self.metadata entry exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAGAgAICMRtBAF6CAwRe/IkKBOW8LUwEM7NJnjYaAI4DACYAEAACIkMxGYEFEkQxGESIAfkjQzEZFEQxGEQ2GgFXAgA2GgIXiAGYI0MxGRREMRhENhoBVwIANhoCVwIANhoDF4gADSNDMRlA/7kxGBREI0OKAwAiRwOAAEcDi/4VSUAAAYmL/QFRAAgXSYwEI4wFFkmMAL1FAUEBPYsAvkQXjAWLBIsFCBZJjAK9RQFAAHeLCCQOQQAPiwJJvEiL/r8lFosATL+JIosISU4CDyJLAk8CTSRLAg8kSwNPAk2L/k8CSwJSSwIkCUlLBA9MTwRPAk1JSwMMSwNMTYv+TwNPAlJLARWLAklOAksB0yJMTwTSiwQlCBZLARVK0yJMTwPSJRaLAEy/iYsCvUxJTwJEJEwJSYwGiwgPQQAUSYsISU4DCIsCSU8C00xPAov+0okiiwhJTgIPIksCTwJNiwZJSwMPSwFLBE8CTYv+TwNLAlJLA0sDCUlLBQ9MTwVPAk1JSwMMSwNMTYv+TwNPAlKMA08CSUsDCIsCSU8C00xPA08D0osFIwhJjAeLBAgWSYwBvUUBQAAIiwFJvEiAAL+LA0kViwFJTgJLAdMiTE8D0osHFosATL+JIxaLAEy/Qv7BigIAIoAASYv+AVEACBdJFkm9RQFAAAGJiwS+RBeMAiOMAYsBiwIOQQAciwOLAQgWSYwAvUUBQQAEiwC8SIsBIwiMAUL/3IsEvEiJMQAyCRJEsTIAMglJsgkisgiyByOyELIBs4k=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}