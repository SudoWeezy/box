{
  "version": 3,
  "sources": [
    "../../box_app/contract.py"
  ],
  "mappings": ";;;;;AAIA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;AA4BK;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AArBL;;;AAAA;;;AAAA;;;AAAA;AAqBK;;;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AALL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAKK;;;AAAA;;AALL;;AAAA;;;;;;;;;AAKA;;;;;;AAG+B;;AAAA;AAAA;;;AAAR;AAAf;AACqB;AAAf;AACN;;AAAY;AAAZ;AACR;;;AACe;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;;AACC;;AAAA;AAAA;;AAAA;;AAAA;AACc;;AAAA;AAAgB;AAA9B;AAAA;;AACsB;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAApB;;AAAA;AAAiD;;;;AAAjD;AAAlB;;;AACgD;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAhC;;AAAA;AAAA;;AAAA;AACA;AAAA;;AAAA;;AAAA;;AAIhB;;;AAE+B;;AAAA;AAAA;;;AAAR;AACf;AAAqB;AAAf;AACU;AAAhB;;AACkB;AAAlB;;;AAOI;;AAAc;;AAAd;AADJ;AAGA;AAIQ;;AAHK;;AAEU;;;AADZ;;;;;AAFX;;;;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.box_app.contract.BoxApp.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "7": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "10": {
      "op": "pushbytess 0x5efc890a 0xe5bc2d4c 0x33b3499e // method \"fill_box(string,string,uint64)void\", method \"delete_box(string,uint64)void\", method \"delete_application()void\"",
      "defined_out": [
        "Method(delete_application()void)",
        "Method(delete_box(string,uint64)void)",
        "Method(fill_box(string,string,uint64)void)"
      ],
      "stack_out": [
        "Method(fill_box(string,string,uint64)void)",
        "Method(delete_box(string,uint64)void)",
        "Method(delete_application()void)"
      ]
    },
    "27": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(delete_application()void)",
        "Method(delete_box(string,uint64)void)",
        "Method(fill_box(string,string,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(fill_box(string,string,uint64)void)",
        "Method(delete_box(string,uint64)void)",
        "Method(delete_application()void)",
        "tmp%2#0"
      ]
    },
    "30": {
      "op": "match main_fill_box_route@5 main_delete_box_route@6 main_delete_application_route@7",
      "stack_out": []
    },
    "38": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "39": {
      "op": "return",
      "stack_out": []
    },
    "40": {
      "block": "main_delete_application_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "42": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "DeleteApplication"
      ]
    },
    "44": {
      "op": "==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "45": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "46": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "48": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "49": {
      "callsub": "smart_contracts.box_app.contract.BoxApp.delete_application",
      "op": "callsub delete_application"
    },
    "52": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "53": {
      "op": "return",
      "stack_out": []
    },
    "54": {
      "block": "main_delete_box_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "56": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "57": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "58": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "60": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "61": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "64": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "67": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "70": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "71": {
      "callsub": "smart_contracts.box_app.contract.BoxApp.delete_box",
      "op": "callsub delete_box",
      "stack_out": []
    },
    "74": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "75": {
      "op": "return",
      "stack_out": []
    },
    "76": {
      "block": "main_fill_box_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "78": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "79": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "80": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "82": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "83": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "86": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "89": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "92": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "95": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "98": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "99": {
      "callsub": "smart_contracts.box_app.contract.BoxApp.fill_box",
      "op": "callsub fill_box",
      "stack_out": []
    },
    "102": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "103": {
      "op": "return",
      "stack_out": []
    },
    "104": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "106": {
      "op": "bnz main_after_if_else@10",
      "stack_out": []
    },
    "109": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "111": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "112": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "113": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "114": {
      "op": "return",
      "stack_out": []
    },
    "115": {
      "subroutine": "smart_contracts.box_app.contract.BoxApp.fill_box",
      "params": {
        "raw_key#0": "bytes",
        "value#0": "bytes",
        "index#0": "uint64"
      },
      "block": "fill_box",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "118": {
      "op": "intc_1 // 0",
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "119": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "encoded_value%0#0",
        "idx#0"
      ]
    },
    "121": {
      "op": "frame_dig -3",
      "defined_out": [
        "raw_key#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "raw_key#0 (copy)"
      ]
    },
    "123": {
      "op": "sha256",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "tmp%0#0"
      ]
    },
    "124": {
      "op": "substring 0 8",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "tmp%1#0"
      ]
    },
    "127": {
      "op": "btoi",
      "defined_out": [
        "metadata_key#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0"
      ]
    },
    "128": {
      "op": "dup",
      "defined_out": [
        "metadata_key#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "metadata_key#0"
      ]
    },
    "129": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "metadata_key#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "metadata_key#0",
        "1"
      ]
    },
    "130": {
      "op": "+",
      "defined_out": [
        "key#0",
        "metadata_key#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0"
      ]
    },
    "131": {
      "op": "frame_dig -2",
      "defined_out": [
        "key#0",
        "metadata_key#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "value#0 (copy)"
      ]
    },
    "133": {
      "op": "len",
      "defined_out": [
        "key#0",
        "len_value#0",
        "metadata_key#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0"
      ]
    },
    "134": {
      "op": "dup",
      "defined_out": [
        "key#0",
        "len_value#0",
        "metadata_key#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "len_value#0"
      ]
    },
    "135": {
      "op": "bz fill_box_after_if_else@8",
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0"
      ]
    },
    "138": {
      "op": "frame_dig 3",
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "key#0"
      ]
    },
    "140": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "key#0",
        "len_value#0",
        "metadata_key#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "encoded_value%0#0"
      ]
    },
    "141": {
      "op": "dup",
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "encoded_value%0#0",
        "encoded_value%0#0"
      ]
    },
    "142": {
      "op": "frame_bury 0",
      "defined_out": [
        "encoded_value%0#0",
        "key#0",
        "len_value#0",
        "metadata_key#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "encoded_value%0#0"
      ]
    },
    "144": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "encoded_value%0#0",
        "key#0",
        "len_value#0",
        "maybe_exists%0#0",
        "metadata_key#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "145": {
      "op": "bury 1",
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "maybe_exists%0#0"
      ]
    },
    "147": {
      "op": "bnz fill_box_else_body@3",
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0"
      ]
    },
    "150": {
      "op": "frame_dig 0",
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "encoded_value%0#0"
      ]
    },
    "152": {
      "op": "dup",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "key#0",
        "len_value#0",
        "metadata_key#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "153": {
      "op": "box_del",
      "defined_out": [
        "encoded_value%0#0",
        "key#0",
        "len_value#0",
        "metadata_key#0",
        "{box_del}"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "encoded_value%0#0",
        "{box_del}"
      ]
    },
    "154": {
      "op": "pop",
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "encoded_value%0#0"
      ]
    },
    "155": {
      "op": "frame_dig -2",
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "encoded_value%0#0",
        "value#0 (copy)"
      ]
    },
    "157": {
      "op": "box_put",
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0"
      ]
    },
    "158": {
      "op": "frame_dig 2",
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "metadata_key#0"
      ]
    },
    "160": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%2#0",
        "key#0",
        "len_value#0",
        "metadata_key#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "encoded_value%2#0"
      ]
    },
    "161": {
      "op": "intc_1 // 0",
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "encoded_value%2#0",
        "0"
      ]
    },
    "162": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "key#0",
        "len_value#0",
        "metadata_key#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ]
    },
    "163": {
      "op": "box_put",
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0"
      ]
    },
    "164": {
      "block": "fill_box_after_if_else@8",
      "stack_in": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "165": {
      "block": "fill_box_else_body@3",
      "stack_in": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "encoded_value%0#0"
      ]
    },
    "167": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "encoded_value%0#0",
        "idx#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "idx#0",
        "check%0#0"
      ]
    },
    "168": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "check%0#0",
        "idx#0"
      ]
    },
    "169": {
      "op": "dup",
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "check%0#0",
        "idx#0",
        "idx#0 (copy)"
      ]
    },
    "170": {
      "op": "cover 2",
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "idx#0",
        "check%0#0",
        "idx#0"
      ]
    },
    "172": {
      "op": "frame_bury 1",
      "defined_out": [
        "check%0#0",
        "encoded_value%0#0",
        "idx#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "idx#0",
        "check%0#0"
      ]
    },
    "174": {
      "error": "check self.memory entry exists",
      "op": "assert // check self.memory entry exists",
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "idx#0"
      ]
    },
    "175": {
      "op": "frame_dig 4",
      "defined_out": [
        "encoded_value%0#0",
        "idx#0",
        "len_value#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "idx#0",
        "len_value#0"
      ]
    },
    "177": {
      "op": "+",
      "defined_out": [
        "encoded_value%0#0",
        "idx#0",
        "len_value#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "tmp%3#0"
      ]
    },
    "178": {
      "op": "pushint 32768 // 32768",
      "defined_out": [
        "32768",
        "encoded_value%0#0",
        "idx#0",
        "len_value#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "tmp%3#0",
        "32768"
      ]
    },
    "182": {
      "op": "<=",
      "defined_out": [
        "encoded_value%0#0",
        "idx#0",
        "len_value#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "tmp%4#0"
      ]
    },
    "183": {
      "op": "bz fill_box_after_if_else@8",
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0"
      ]
    },
    "186": {
      "op": "frame_dig 1",
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "idx#0"
      ]
    },
    "188": {
      "op": "dup",
      "defined_out": [
        "encoded_value%0#0",
        "idx#0",
        "idx#0 (copy)",
        "len_value#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "idx#0",
        "idx#0 (copy)"
      ]
    },
    "189": {
      "op": "frame_dig 4",
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "idx#0",
        "idx#0 (copy)",
        "len_value#0"
      ]
    },
    "191": {
      "op": "dup",
      "defined_out": [
        "encoded_value%0#0",
        "idx#0",
        "idx#0 (copy)",
        "len_value#0",
        "len_value#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "idx#0",
        "idx#0 (copy)",
        "len_value#0 (copy)",
        "len_value#0 (copy)"
      ]
    },
    "192": {
      "op": "cover 3",
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "len_value#0",
        "idx#0",
        "idx#0 (copy)",
        "len_value#0 (copy)"
      ]
    },
    "194": {
      "op": "+",
      "defined_out": [
        "encoded_value%0#0",
        "idx#0",
        "len_value#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "len_value#0",
        "idx#0",
        "tmp%5#0"
      ]
    },
    "195": {
      "op": "frame_dig 0",
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "len_value#0",
        "idx#0",
        "tmp%5#0",
        "encoded_value%0#0"
      ]
    },
    "197": {
      "op": "dup"
    },
    "198": {
      "op": "uncover 2",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "idx#0",
        "len_value#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "len_value#0",
        "idx#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "tmp%5#0"
      ]
    },
    "200": {
      "op": "box_resize",
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "len_value#0",
        "idx#0",
        "encoded_value%0#0"
      ]
    },
    "201": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "len_value#0",
        "encoded_value%0#0",
        "idx#0"
      ]
    },
    "202": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "encoded_value%0#0",
        "idx#0",
        "len_value#0"
      ]
    },
    "204": {
      "op": "frame_dig -2",
      "defined_out": [
        "encoded_value%0#0",
        "idx#0",
        "len_value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0",
        "encoded_value%0#0",
        "idx#0",
        "len_value#0",
        "value#0 (copy)"
      ]
    },
    "206": {
      "op": "box_splice",
      "stack_out": [
        "encoded_value%0#0",
        "idx#0",
        "metadata_key#0",
        "key#0",
        "len_value#0"
      ]
    },
    "207": {
      "retsub": true,
      "op": "retsub"
    },
    "208": {
      "subroutine": "smart_contracts.box_app.contract.BoxApp.delete_box",
      "params": {
        "raw_key#0": "bytes",
        "index#0": "uint64"
      },
      "block": "delete_box",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "211": {
      "op": "frame_dig -2",
      "defined_out": [
        "raw_key#0 (copy)"
      ],
      "stack_out": [
        "raw_key#0 (copy)"
      ]
    },
    "213": {
      "op": "sha256",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "214": {
      "op": "substring 0 8",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "217": {
      "op": "btoi",
      "defined_out": [
        "metadata_key#0"
      ],
      "stack_out": [
        "metadata_key#0"
      ]
    },
    "218": {
      "op": "dup",
      "defined_out": [
        "metadata_key#0",
        "metadata_key#0 (copy)"
      ],
      "stack_out": [
        "metadata_key#0",
        "metadata_key#0 (copy)"
      ]
    },
    "219": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "metadata_key#0",
        "metadata_key#0 (copy)"
      ],
      "stack_out": [
        "metadata_key#0",
        "metadata_key#0 (copy)",
        "1"
      ]
    },
    "220": {
      "op": "+",
      "defined_out": [
        "key#0",
        "metadata_key#0"
      ],
      "stack_out": [
        "metadata_key#0",
        "key#0"
      ]
    },
    "221": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "metadata_key#0"
      ],
      "stack_out": [
        "metadata_key#0",
        "encoded_value%0#0"
      ]
    },
    "222": {
      "op": "box_del",
      "defined_out": [
        "metadata_key#0",
        "{box_del}"
      ],
      "stack_out": [
        "metadata_key#0",
        "{box_del}"
      ]
    },
    "223": {
      "op": "pop",
      "stack_out": [
        "metadata_key#0"
      ]
    },
    "224": {
      "op": "itob",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "225": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "226": {
      "op": "pop",
      "stack_out": []
    },
    "227": {
      "retsub": true,
      "op": "retsub"
    },
    "228": {
      "subroutine": "smart_contracts.box_app.contract.BoxApp.delete_application",
      "params": {},
      "block": "delete_application",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "230": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "232": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "233": {
      "op": "assert",
      "stack_out": []
    },
    "234": {
      "op": "itxn_begin"
    },
    "235": {
      "op": "global MinTxnFee",
      "defined_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "237": {
      "op": "global CreatorAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "239": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_CloseRemainderTo_idx_0#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_CloseRemainderTo_idx_0#0"
      ]
    },
    "240": {
      "op": "itxn_field CloseRemainderTo",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "242": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "0"
      ]
    },
    "243": {
      "op": "itxn_field Amount",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "245": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "247": {
      "op": "intc_0 // pay",
      "defined_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "pay"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "pay"
      ]
    },
    "248": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "250": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "252": {
      "op": "itxn_submit"
    },
    "253": {
      "retsub": true,
      "op": "retsub"
    }
  }
}