#pragma version 10
#pragma typetrack false

// smart_contracts.box_app.contract.BoxApp.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 32768 2
    // smart_contracts/box_app/contract.py:5
    // class BoxApp(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@8
    pushbytess 0x5efc890a 0xe5bc2d4c 0x33b3499e // method "fill_box(string,string,uint64)void", method "delete_box(string,uint64)void", method "delete_application()void"
    txna ApplicationArgs 0
    match main_fill_box_route@5 main_delete_box_route@6 main_delete_application_route@7

main_after_if_else@10:
    // smart_contracts/box_app/contract.py:5
    // class BoxApp(ARC4Contract):
    intc_0 // 0
    return

main_delete_application_route@7:
    // smart_contracts/box_app/contract.py:84
    // @abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    pushint 5 // DeleteApplication
    ==
    assert // OnCompletion is not DeleteApplication
    txn ApplicationID
    assert // can only call when not creating
    callsub delete_application
    intc_1 // 1
    return

main_delete_box_route@6:
    // smart_contracts/box_app/contract.py:77
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/box_app/contract.py:5
    // class BoxApp(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // smart_contracts/box_app/contract.py:77
    // @abimethod()
    callsub delete_box
    intc_1 // 1
    return

main_fill_box_route@5:
    // smart_contracts/box_app/contract.py:10
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/box_app/contract.py:5
    // class BoxApp(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    // smart_contracts/box_app/contract.py:10
    // @abimethod()
    callsub fill_box
    intc_1 // 1
    return

main_bare_routing@8:
    // smart_contracts/box_app/contract.py:5
    // class BoxApp(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@10
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts.box_app.contract.BoxApp.fill_box(raw_key: bytes, value: bytes, index: uint64) -> void:
fill_box:
    // smart_contracts/box_app/contract.py:10-11
    // @abimethod()
    // def fill_box(self, raw_key: String, value: String, index: UInt64) -> None:
    proto 3 0
    intc_0 // 0
    dupn 3
    pushbytes ""
    dupn 3
    // smart_contracts/box_app/contract.py:13
    // lv = vb.length
    frame_dig -2
    len
    dup
    // smart_contracts/box_app/contract.py:14
    // if lv == UInt64(0):
    bnz fill_box_after_if_else@2
    // smart_contracts/box_app/contract.py:15
    // return
    retsub

fill_box_after_if_else@2:
    // smart_contracts/box_app/contract.py:17
    // base = op.btoi(op.sha256(raw_key.bytes)[:8])
    frame_dig -3
    sha256
    substring 0 8
    btoi
    dup
    frame_bury 4
    // smart_contracts/box_app/contract.py:18
    // seg_count = UInt64(1)
    intc_1 // 1
    frame_bury 5
    // smart_contracts/box_app/contract.py:19
    // if base in self.metadata:
    itob
    dup
    frame_bury 0
    box_len
    bury 1
    bz fill_box_else_body@4
    // smart_contracts/box_app/contract.py:20
    // seg_count = self.metadata[base]
    frame_dig 0
    box_get
    assert // check self.metadata entry exists
    btoi
    frame_bury 5

fill_box_after_if_else@5:
    // smart_contracts/box_app/contract.py:24-25
    // # Determine current box key
    // cur_key = base + seg_count
    frame_dig 4
    frame_dig 5
    +
    // smart_contracts/box_app/contract.py:27
    // if cur_key not in self.memory:
    itob
    dup
    frame_bury 2
    box_len
    bury 1
    bnz fill_box_after_if_else@9
    // smart_contracts/box_app/contract.py:28-29
    // # First write for this base
    // if lv <= UInt64(32768):
    frame_dig 8
    intc_2 // 32768
    <=
    bz fill_box_after_if_else@8
    // smart_contracts/box_app/contract.py:30
    // self.memory[cur_key] = value
    frame_dig 2
    dup
    box_del
    pop
    frame_dig -2
    box_put
    // smart_contracts/box_app/contract.py:31-32
    // # created first segment
    // self.metadata[base] = UInt64(2)
    intc_3 // 2
    itob
    frame_dig 0
    swap
    box_put
    // smart_contracts/box_app/contract.py:33
    // return
    retsub

fill_box_after_if_else@8:
    // smart_contracts/box_app/contract.py:36
    // head = vb[0:head_len]
    intc_0 // 0
    frame_dig 8
    dup
    cover 2
    >=
    intc_0 // 0
    dig 2
    uncover 2
    select
    // smart_contracts/box_app/contract.py:34-35
    // # Spill into two boxes: head into seg1, tail into seg2
    // head_len = UInt64(32768)
    intc_2 // 32768
    // smart_contracts/box_app/contract.py:36
    // head = vb[0:head_len]
    dig 2
    >=
    // smart_contracts/box_app/contract.py:34-35
    // # Spill into two boxes: head into seg1, tail into seg2
    // head_len = UInt64(32768)
    intc_2 // 32768
    // smart_contracts/box_app/contract.py:36
    // head = vb[0:head_len]
    dig 3
    uncover 2
    select
    frame_dig -2
    uncover 2
    dig 2
    substring3
    // smart_contracts/box_app/contract.py:37
    // tail = vb[head_len : lv - head_len]
    dig 2
    // smart_contracts/box_app/contract.py:34-35
    // # Spill into two boxes: head into seg1, tail into seg2
    // head_len = UInt64(32768)
    intc_2 // 32768
    // smart_contracts/box_app/contract.py:37
    // tail = vb[head_len : lv - head_len]
    -
    dup
    dig 4
    >=
    swap
    uncover 4
    uncover 2
    select
    dup
    dig 3
    <
    dig 3
    swap
    select
    frame_dig -2
    uncover 3
    uncover 2
    substring3
    // smart_contracts/box_app/contract.py:39
    // self.memory.box(cur_key).ref.resize(head.length)
    dig 1
    len
    frame_dig 2
    dup
    cover 2
    dig 1
    box_resize
    // smart_contracts/box_app/contract.py:40
    // self.memory.box(cur_key).ref.splice(UInt64(0), head.length, head)
    intc_0 // 0
    swap
    uncover 4
    box_splice
    // smart_contracts/box_app/contract.py:41
    // next_key = base + UInt64(2)
    frame_dig 4
    intc_3 // 2
    +
    // smart_contracts/box_app/contract.py:42
    // self.memory.box(next_key).ref.resize(tail.length)
    itob
    dig 1
    len
    dup2
    box_resize
    // smart_contracts/box_app/contract.py:43
    // self.memory.box(next_key).ref.splice(UInt64(0), tail.length, tail)
    intc_0 // 0
    swap
    uncover 3
    box_splice
    // smart_contracts/box_app/contract.py:44
    // self.metadata[base] = UInt64(2)
    intc_3 // 2
    itob
    frame_dig 0
    swap
    box_put
    // smart_contracts/box_app/contract.py:45
    // return
    retsub

fill_box_after_if_else@9:
    // smart_contracts/box_app/contract.py:47-48
    // # Append to existing current segment (seg_count >= 1)
    // cur_len = self.memory.length(cur_key)
    frame_dig 2
    box_len
    swap
    dup
    uncover 2
    assert // check self.memory entry exists
    // smart_contracts/box_app/contract.py:49
    // space_left = UInt64(32768) - cur_len
    intc_2 // 32768
    swap
    -
    dup
    frame_bury 6
    // smart_contracts/box_app/contract.py:51
    // if lv <= space_left:
    frame_dig 8
    >=
    bz fill_box_after_if_else@11
    // smart_contracts/box_app/contract.py:52-53
    // # Fits in current segment
    // self.memory.box(cur_key).ref.resize(cur_len + lv)
    dup
    frame_dig 8
    dup
    cover 3
    +
    frame_dig 2
    dup
    uncover 2
    box_resize
    // smart_contracts/box_app/contract.py:54
    // self.memory.box(cur_key).ref.splice(cur_len, lv, vb)
    swap
    uncover 2
    frame_dig -2
    box_splice
    // smart_contracts/box_app/contract.py:55
    // return
    retsub

fill_box_after_if_else@11:
    // smart_contracts/box_app/contract.py:59
    // head = vb[0:head_len]
    intc_0 // 0
    frame_dig 8
    dup
    cover 2
    >=
    intc_0 // 0
    dig 2
    uncover 2
    select
    frame_dig 6
    dup
    dig 3
    >=
    dig 1
    dig 4
    uncover 2
    select
    frame_dig -2
    uncover 3
    dig 2
    substring3
    // smart_contracts/box_app/contract.py:60
    // tail = vb[head_len : lv - head_len]
    dig 3
    dig 3
    -
    dup
    dig 5
    >=
    swap
    uncover 5
    uncover 2
    select
    dup
    dig 3
    <
    dig 3
    swap
    select
    frame_dig -2
    uncover 3
    uncover 2
    substring3
    frame_bury 3
    // smart_contracts/box_app/contract.py:62-63
    // # Append head to current
    // self.memory.box(cur_key).ref.resize(cur_len + head_len)
    uncover 2
    dup
    dig 3
    +
    frame_dig 2
    dup
    uncover 2
    box_resize
    // smart_contracts/box_app/contract.py:64
    // self.memory.box(cur_key).ref.splice(cur_len, head_len, head)
    swap
    uncover 3
    uncover 3
    box_splice
    // smart_contracts/box_app/contract.py:66-67
    // # Write tail to next segment start
    // next_key = base + (seg_count + UInt64(1))
    frame_dig 5
    intc_1 // 1
    +
    dup
    frame_bury 7
    frame_dig 4
    +
    // smart_contracts/box_app/contract.py:68
    // if next_key not in self.memory:
    itob
    dup
    frame_bury 1
    box_len
    bury 1
    bnz fill_box_after_if_else@13
    // smart_contracts/box_app/contract.py:69
    // self.memory[next_key] = String("")
    frame_dig 1
    dup
    box_del
    pop
    pushbytes ""
    box_put

fill_box_after_if_else@13:
    // smart_contracts/box_app/contract.py:71
    // self.memory.box(next_key).ref.resize(tail.length)
    frame_dig 3
    dup
    len
    frame_dig 1
    dup
    cover 2
    dig 1
    box_resize
    // smart_contracts/box_app/contract.py:72
    // self.memory.box(next_key).ref.splice(UInt64(0), tail.length, tail)
    intc_0 // 0
    swap
    uncover 3
    box_splice
    // smart_contracts/box_app/contract.py:74-75
    // # We just created/used the next segment
    // self.metadata[base] = seg_count + UInt64(1)
    frame_dig 7
    itob
    frame_dig 0
    swap
    box_put
    retsub

fill_box_else_body@4:
    // smart_contracts/box_app/contract.py:22
    // self.metadata[base] = UInt64(1)
    intc_1 // 1
    itob
    frame_dig 0
    swap
    box_put
    b fill_box_after_if_else@5


// smart_contracts.box_app.contract.BoxApp.delete_box(raw_key: bytes, index: uint64) -> void:
delete_box:
    // smart_contracts/box_app/contract.py:77-78
    // @abimethod()
    // def delete_box(self, raw_key: String, index: UInt64) -> None:
    proto 2 0
    // smart_contracts/box_app/contract.py:79
    // metadata_key = op.btoi(op.sha256(raw_key.bytes)[:8])
    frame_dig -2
    sha256
    substring 0 8
    btoi
    // smart_contracts/box_app/contract.py:80
    // key = metadata_key + 1
    dup
    intc_1 // 1
    +
    // smart_contracts/box_app/contract.py:81
    // del self.memory[key]  # Todo, loop through all key
    itob
    box_del
    pop
    // smart_contracts/box_app/contract.py:82
    // del self.metadata[metadata_key]
    itob
    box_del
    pop
    retsub


// smart_contracts.box_app.contract.BoxApp.delete_application() -> void:
delete_application:
    // smart_contracts/box_app/contract.py:88
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/box_app/contract.py:89-94
    // itxn.Payment(
    //     receiver=Global.creator_address,
    //     amount=0,
    //     close_remainder_to=Global.creator_address,
    //     fee=Global.min_txn_fee,
    // ).submit()
    itxn_begin
    // smart_contracts/box_app/contract.py:93
    // fee=Global.min_txn_fee,
    global MinTxnFee
    // smart_contracts/box_app/contract.py:90
    // receiver=Global.creator_address,
    global CreatorAddress
    // smart_contracts/box_app/contract.py:92
    // close_remainder_to=Global.creator_address,
    dup
    itxn_field CloseRemainderTo
    // smart_contracts/box_app/contract.py:91
    // amount=0,
    intc_0 // 0
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/box_app/contract.py:89
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    itxn_field Fee
    // smart_contracts/box_app/contract.py:89-94
    // itxn.Payment(
    //     receiver=Global.creator_address,
    //     amount=0,
    //     close_remainder_to=Global.creator_address,
    //     fee=Global.min_txn_fee,
    // ).submit()
    itxn_submit
    retsub
