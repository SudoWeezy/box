#pragma version 10
#pragma typetrack false

// smart_contracts.box_app.contract.BoxApp.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 1 0
    // smart_contracts/box_app/contract.py:5
    // class BoxApp(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@8
    pushbytess 0x5efc890a 0xe5bc2d4c 0x33b3499e // method "fill_box(string,string,uint64)void", method "delete_box(string,uint64)void", method "delete_application()void"
    txna ApplicationArgs 0
    match main_fill_box_route@5 main_delete_box_route@6 main_delete_application_route@7

main_after_if_else@10:
    // smart_contracts/box_app/contract.py:5
    // class BoxApp(ARC4Contract):
    intc_1 // 0
    return

main_delete_application_route@7:
    // smart_contracts/box_app/contract.py:33
    // @abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    pushint 5 // DeleteApplication
    ==
    assert // OnCompletion is not DeleteApplication
    txn ApplicationID
    assert // can only call when not creating
    callsub delete_application
    intc_0 // 1
    return

main_delete_box_route@6:
    // smart_contracts/box_app/contract.py:26
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/box_app/contract.py:5
    // class BoxApp(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // smart_contracts/box_app/contract.py:26
    // @abimethod()
    callsub delete_box
    intc_0 // 1
    return

main_fill_box_route@5:
    // smart_contracts/box_app/contract.py:10
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/box_app/contract.py:5
    // class BoxApp(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    // smart_contracts/box_app/contract.py:10
    // @abimethod()
    callsub fill_box
    intc_0 // 1
    return

main_bare_routing@8:
    // smart_contracts/box_app/contract.py:5
    // class BoxApp(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@10
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// smart_contracts.box_app.contract.BoxApp.fill_box(raw_key: bytes, value: bytes, index: uint64) -> void:
fill_box:
    // smart_contracts/box_app/contract.py:10-11
    // @abimethod()
    // def fill_box(self, raw_key: String, value: String, index: UInt64) -> None:
    proto 3 0
    intc_1 // 0
    pushbytes ""
    // smart_contracts/box_app/contract.py:13
    // metadata_key = op.btoi(op.sha256(raw_key.bytes)[:8])
    frame_dig -3
    sha256
    substring 0 8
    btoi
    dup
    // smart_contracts/box_app/contract.py:14
    // key = metadata_key + 1
    intc_0 // 1
    +
    // smart_contracts/box_app/contract.py:15
    // len_value = value_bytes.length
    frame_dig -2
    len
    dup
    // smart_contracts/box_app/contract.py:16
    // if len_value > 0:
    bz fill_box_after_if_else@8
    // smart_contracts/box_app/contract.py:17
    // if key not in self.memory:
    frame_dig 3
    itob
    dup
    frame_bury 0
    box_len
    bury 1
    bnz fill_box_else_body@3
    // smart_contracts/box_app/contract.py:18
    // self.memory[key] = value
    frame_dig 0
    dup
    box_del
    pop
    frame_dig -2
    box_put
    // smart_contracts/box_app/contract.py:19
    // self.metadata[metadata_key] = UInt64(0)
    frame_dig 2
    itob
    intc_1 // 0
    itob
    box_put

fill_box_after_if_else@8:
    retsub

fill_box_else_body@3:
    // smart_contracts/box_app/contract.py:20
    // elif (len_value + (idx := self.memory.length(key))) <= UInt64(32768):
    frame_dig 0
    box_len
    swap
    dup
    cover 2
    frame_bury 1
    assert // check self.memory entry exists
    frame_dig 4
    +
    pushint 32768 // 32768
    <=
    bz fill_box_after_if_else@8
    // smart_contracts/box_app/contract.py:21
    // self.memory.box(key).ref.resize(idx + len_value)
    frame_dig 1
    dup
    frame_dig 4
    dup
    cover 3
    +
    frame_dig 0
    dup
    uncover 2
    box_resize
    // smart_contracts/box_app/contract.py:22
    // self.memory.box(key).ref.splice(idx, len_value, value_bytes)
    swap
    uncover 2
    frame_dig -2
    box_splice
    retsub


// smart_contracts.box_app.contract.BoxApp.delete_box(raw_key: bytes, index: uint64) -> void:
delete_box:
    // smart_contracts/box_app/contract.py:26-27
    // @abimethod()
    // def delete_box(self, raw_key: String, index: UInt64) -> None:
    proto 2 0
    // smart_contracts/box_app/contract.py:28
    // metadata_key = op.btoi(op.sha256(raw_key.bytes)[:8])
    frame_dig -2
    sha256
    substring 0 8
    btoi
    // smart_contracts/box_app/contract.py:29
    // key = metadata_key + 1
    dup
    intc_0 // 1
    +
    // smart_contracts/box_app/contract.py:30
    // del self.memory[key]  # Todo, loop through all key
    itob
    box_del
    pop
    // smart_contracts/box_app/contract.py:31
    // del self.metadata[metadata_key]
    itob
    box_del
    pop
    retsub


// smart_contracts.box_app.contract.BoxApp.delete_application() -> void:
delete_application:
    // smart_contracts/box_app/contract.py:38
    // Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    // smart_contracts/box_app/contract.py:37-39
    // assert (
    //     Txn.sender == Global.creator_address
    // )  # Send all the unsold assets to the creator
    assert
    // smart_contracts/box_app/contract.py:40-45
    // itxn.Payment(
    //     receiver=Global.creator_address,
    //     amount=0,
    //     close_remainder_to=Global.creator_address,
    //     fee=Global.min_txn_fee,
    // ).submit()
    itxn_begin
    // smart_contracts/box_app/contract.py:44
    // fee=Global.min_txn_fee,
    global MinTxnFee
    // smart_contracts/box_app/contract.py:41
    // receiver=Global.creator_address,
    global CreatorAddress
    // smart_contracts/box_app/contract.py:43
    // close_remainder_to=Global.creator_address,
    dup
    itxn_field CloseRemainderTo
    // smart_contracts/box_app/contract.py:42
    // amount=0,
    intc_1 // 0
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/box_app/contract.py:40
    // itxn.Payment(
    intc_0 // pay
    itxn_field TypeEnum
    itxn_field Fee
    // smart_contracts/box_app/contract.py:40-45
    // itxn.Payment(
    //     receiver=Global.creator_address,
    //     amount=0,
    //     close_remainder_to=Global.creator_address,
    //     fee=Global.min_txn_fee,
    // ).submit()
    itxn_submit
    retsub
